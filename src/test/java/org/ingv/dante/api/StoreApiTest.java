/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.96.3
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.api;

import org.ingv.dante.ApiException;
import org.ingv.dante.model.AddCatalog201Response;
import org.ingv.dante.model.AddCatalogRequest;
import org.ingv.dante.model.AddEvent201Response;
import org.ingv.dante.model.AddFocalmechanism201Response;
import org.ingv.dante.model.AddFocalmechanismRequest;
import org.ingv.dante.model.AddLocalspaceRequest;
import org.ingv.dante.model.AddMagnitude201Response;
import org.ingv.dante.model.AddMagnitudeRequest;
import org.ingv.dante.model.AddMomenttensor201Response;
import org.ingv.dante.model.AddMomenttensorRequest;
import org.ingv.dante.model.AddOrigin201Response;
import org.ingv.dante.model.AddOriginFlag201Response;
import org.ingv.dante.model.AddOriginFlagRequest;
import org.ingv.dante.model.AddOriginRequest;
import org.ingv.dante.model.AddProvenanceRequest;
import org.ingv.dante.model.AddStrongmotion201Response;
import org.ingv.dante.model.AddStrongmotionRequest;
import org.ingv.dante.model.AddTypeEventRequest;
import org.ingv.dante.model.AddTypeMagnitudeRequest;
import org.ingv.dante.model.AddTypeOriginRequest;
import org.ingv.dante.model.GetEvent200Response;
import org.ingv.dante.model.ObjectTableLocalspace;
import org.ingv.dante.model.ObjectTableProvenance;
import org.ingv.dante.model.ObjectTableTypeEvent;
import org.ingv.dante.model.ObjectTableTypeMagnitude;
import org.ingv.dante.model.ObjectTableTypeOrigin;
import org.ingv.dante.model.Problem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoreApi
 */
@Disabled
public class StoreApiTest {

    private final StoreApi api = new StoreApi();

    /**
     * Add a new catalog to the DB
     *
     * This API is used to add a catalog object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCatalogTest() throws ApiException {
        AddCatalogRequest addCatalogRequest = null;
        AddCatalog201Response response = api.addCatalog(addCatalogRequest);
        // TODO: test validations
    }

    /**
     * Add a new event to the DB
     *
     * This API is used to add an event object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        GetEvent200Response getEvent200Response = null;
        AddEvent201Response response = api.addEvent(getEvent200Response);
        // TODO: test validations
    }

    /**
     * Add a new focalmechanism(s) to the DB
     *
     * This API is used to add a focalmechanism object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFocalmechanismTest() throws ApiException {
        AddFocalmechanismRequest addFocalmechanismRequest = null;
        AddFocalmechanism201Response response = api.addFocalmechanism(addFocalmechanismRequest);
        // TODO: test validations
    }

    /**
     * Add a new localspace to the DB
     *
     * This API is used to add an localspace object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLocalspaceTest() throws ApiException {
        AddLocalspaceRequest addLocalspaceRequest = null;
        ObjectTableLocalspace response = api.addLocalspace(addLocalspaceRequest);
        // TODO: test validations
    }

    /**
     * Add a new magnitude(s) to the DB
     *
     * This API is used to add a magnitude object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMagnitudeTest() throws ApiException {
        AddMagnitudeRequest addMagnitudeRequest = null;
        AddMagnitude201Response response = api.addMagnitude(addMagnitudeRequest);
        // TODO: test validations
    }

    /**
     * Add a new momenttensor(s) to the DB
     *
     * This API is used to add a momenttensor object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMomenttensorTest() throws ApiException {
        AddMomenttensorRequest addMomenttensorRequest = null;
        AddMomenttensor201Response response = api.addMomenttensor(addMomenttensorRequest);
        // TODO: test validations
    }

    /**
     * Add a new origin(s) to the DB
     *
     * This API is used to add an origin object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOriginTest() throws ApiException {
        AddOriginRequest addOriginRequest = null;
        AddOrigin201Response response = api.addOrigin(addOriginRequest);
        // TODO: test validations
    }

    /**
     * Add one or more flags to origin
     *
     * This API is used to add one or more flags to origin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOriginFlagTest() throws ApiException {
        AddOriginFlagRequest addOriginFlagRequest = null;
        AddOriginFlag201Response response = api.addOriginFlag(addOriginFlagRequest);
        // TODO: test validations
    }

    /**
     * Add a new provenance to the DB
     *
     * This API is used to add an provenance object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProvenanceTest() throws ApiException {
        AddProvenanceRequest addProvenanceRequest = null;
        ObjectTableProvenance response = api.addProvenance(addProvenanceRequest);
        // TODO: test validations
    }

    /**
     * Add a new strongmotion(s) to the DB
     *
     * This API is used to add a strongmotion object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStrongmotionTest() throws ApiException {
        AddStrongmotionRequest addStrongmotionRequest = null;
        AddStrongmotion201Response response = api.addStrongmotion(addStrongmotionRequest);
        // TODO: test validations
    }

    /**
     * Add a new type_event to the DB
     *
     * This API is used to add an type_event object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeEventTest() throws ApiException {
        AddTypeEventRequest addTypeEventRequest = null;
        ObjectTableTypeEvent response = api.addTypeEvent(addTypeEventRequest);
        // TODO: test validations
    }

    /**
     * Add a new type_magnitude to the DB
     *
     * This API is used to add an type_magnitude object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeMagnitudeTest() throws ApiException {
        AddTypeMagnitudeRequest addTypeMagnitudeRequest = null;
        ObjectTableTypeMagnitude response = api.addTypeMagnitude(addTypeMagnitudeRequest);
        // TODO: test validations
    }

    /**
     * Add a new type_origin to the DB
     *
     * This API is used to add an type_origin object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeOriginTest() throws ApiException {
        AddTypeOriginRequest addTypeOriginRequest = null;
        ObjectTableTypeOrigin response = api.addTypeOrigin(addTypeOriginRequest);
        // TODO: test validations
    }

}
