/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.api;

import org.ingv.dante.ApiException;
import org.ingv.dante.model.ObjectTableLocalspace;
import org.ingv.dante.model.ObjectTableProvenance;
import org.ingv.dante.model.ObjectTableTypeEvent;
import org.ingv.dante.model.ObjectTableTypeMagnitude;
import org.ingv.dante.model.ObjectTableTypeOrigin;
import org.ingv.dante.model.Problem;
import org.ingv.dante.model.UNKNOWN_BASE_TYPE;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoreApi
 */
@Disabled
public class StoreApiTest {

    private final StoreApi api = new StoreApi();

    /**
     * Add a new event to the DB
     *
     * This API is used to add an event object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addEvent(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new focalmechanism(s) to the DB
     *
     * This API is used to add a focalmechanism object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFocalmechanismTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addFocalmechanism(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new localspace to the DB
     *
     * This API is used to add an localspace object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLocalspaceTest() throws ApiException {
        ObjectTableLocalspace objectTableLocalspace = null;
        ObjectTableLocalspace response = api.addLocalspace(objectTableLocalspace);
        // TODO: test validations
    }

    /**
     * Add a new magnitude(s) to the DB
     *
     * This API is used to add a magnitude object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMagnitudeTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addMagnitude(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new momenttensor(s) to the DB
     *
     * This API is used to add a momenttensor object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMomenttensorTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addMomenttensor(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new origin(s) to the DB
     *
     * This API is used to add an origin object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOriginTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addOrigin(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add one or more flags to origin
     *
     * This API is used to add one or more flags to origin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOriginFlagTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addOriginFlag(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new provenance to the DB
     *
     * This API is used to add an provenance object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProvenanceTest() throws ApiException {
        ObjectTableProvenance objectTableProvenance = null;
        ObjectTableProvenance response = api.addProvenance(objectTableProvenance);
        // TODO: test validations
    }

    /**
     * Add a new strongmotion(s) to the DB
     *
     * This API is used to add a strongmotion object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStrongmotionTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Object response = api.addStrongmotion(UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

    /**
     * Add a new type_event to the DB
     *
     * This API is used to add an type_event object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeEventTest() throws ApiException {
        ObjectTableTypeEvent objectTableTypeEvent = null;
        ObjectTableTypeEvent response = api.addTypeEvent(objectTableTypeEvent);
        // TODO: test validations
    }

    /**
     * Add a new type_magnitude to the DB
     *
     * This API is used to add an type_magnitude object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeMagnitudeTest() throws ApiException {
        ObjectTableTypeMagnitude objectTableTypeMagnitude = null;
        ObjectTableTypeMagnitude response = api.addTypeMagnitude(objectTableTypeMagnitude);
        // TODO: test validations
    }

    /**
     * Add a new type_origin to the DB
     *
     * This API is used to add an type_origin object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTypeOriginTest() throws ApiException {
        ObjectTableTypeOrigin objectTableTypeOrigin = null;
        ObjectTableTypeOrigin response = api.addTypeOrigin(objectTableTypeOrigin);
        // TODO: test validations
    }

}
