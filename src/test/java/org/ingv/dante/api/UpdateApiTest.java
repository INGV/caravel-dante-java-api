/*
 * Dante Web Services
 * # Introduction  Dante is a RESTful API service designed to interact with seismic data stored in the **quakedb** database schema used at INGV. Dante can be extended to other database schemas by creating custom `Model` and `Controller` implementations.  Dante provides a set of routes to store message: **event**, **origin**, **magnitude**, **arrival**, **...**.  ## Input  Dante accepts: - A `json` message (view '**store**' spec below). - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module.  ## Output  Dante exposes RESTful routes for each database table and implements three specialized endpoints: - `/events-group`: returns the preferred origin and magnitude for all clustered events. - `/events`: returns the preferred origin and magnitude for a single event instance. - `/event`: returns the full event details (event, origins, magnitudes, arrivals, amplitudes, etc.) based on an **eventid** or **originid**. 
 *
 * The version of the OpenAPI document: 3.48.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.api;

import org.ingv.dante.ApiException;
import org.ingv.dante.model.ObjectOriginFlag;
import org.ingv.dante.model.ObjectTableLocalspace;
import org.ingv.dante.model.ObjectTableProvenance;
import org.ingv.dante.model.ObjectTableTypeEvent;
import org.ingv.dante.model.ObjectTableTypeMagnitude;
import org.ingv.dante.model.ObjectTableTypeOrigin;
import org.ingv.dante.model.Problem;
import org.ingv.dante.model.UpdateEvent200Response;
import org.ingv.dante.model.UpdateEventRequest;
import org.ingv.dante.model.UpdateEventsGroupRequest;
import org.ingv.dante.model.UpdateMomenttensor200Response;
import org.ingv.dante.model.UpdateMomenttensorRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UpdateApi
 */
@Disabled
public class UpdateApiTest {

    private final UpdateApi api = new UpdateApi();

    /**
     * Update an existing event
     *
     * Update an existing event.&lt;/br&gt; To use this API you must be authenticated and \&quot;event.localspace_name\&quot; owner.&lt;/br&gt; More info about &#x60;event_group_id&#x60; &lt;b&gt;https://gitlab.rm.ingv.it/caravel/dante8/-/issues/69#note_60479&lt;/b&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventTest() throws ApiException {
        Long id = null;
        UpdateEventRequest updateEventRequest = null;
        UpdateEvent200Response response = api.updateEvent(id, updateEventRequest);
        // TODO: test validations
    }

    /**
     * Update/Create an events-group
     *
     * Create a new events-group or Update an existing one.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventsGroupTest() throws ApiException {
        UpdateEventsGroupRequest updateEventsGroupRequest = null;
        ObjectTableTypeEvent response = api.updateEventsGroup(updateEventsGroupRequest);
        // TODO: test validations
    }

    /**
     * Update an existing localspace
     *
     * Update an existing localspace.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocalspaceTest() throws ApiException {
        Long id = null;
        ObjectTableLocalspace objectTableLocalspace = null;
        ObjectTableLocalspace response = api.updateLocalspace(id, objectTableLocalspace);
        // TODO: test validations
    }

    /**
     * Update an existing momenttensor
     *
     * Update an existing momenttensor.&lt;/br&gt; To use this API you must be authenticated and \&quot;momenttensor.localspace_name\&quot; owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMomenttensorTest() throws ApiException {
        Long id = null;
        UpdateMomenttensorRequest updateMomenttensorRequest = null;
        UpdateMomenttensor200Response response = api.updateMomenttensor(id, updateMomenttensorRequest);
        // TODO: test validations
    }

    /**
     * Update an existing origin-flag
     *
     * Update an existing origin-flag.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOriginFlagTest() throws ApiException {
        Long id = null;
        ObjectOriginFlag objectOriginFlag = null;
        ObjectOriginFlag response = api.updateOriginFlag(id, objectOriginFlag);
        // TODO: test validations
    }

    /**
     * Update an existing provenance
     *
     * Update an existing provenance.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProvenanceTest() throws ApiException {
        Long id = null;
        ObjectTableProvenance objectTableProvenance = null;
        ObjectTableProvenance response = api.updateProvenance(id, objectTableProvenance);
        // TODO: test validations
    }

    /**
     * Update an existing type_event
     *
     * Update an existing type_event.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypeEventTest() throws ApiException {
        Long id = null;
        ObjectTableTypeEvent objectTableTypeEvent = null;
        ObjectTableTypeEvent response = api.updateTypeEvent(id, objectTableTypeEvent);
        // TODO: test validations
    }

    /**
     * Update an existing type_magnitude
     *
     * Update an existing type_magnitude.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypeMagnitudeTest() throws ApiException {
        Long id = null;
        ObjectTableTypeMagnitude objectTableTypeMagnitude = null;
        ObjectTableTypeMagnitude response = api.updateTypeMagnitude(id, objectTableTypeMagnitude);
        // TODO: test validations
    }

    /**
     * Update an existing type_origin
     *
     * Update an existing type_origin.&lt;/br&gt; To use this API you must be authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypeOriginTest() throws ApiException {
        Long id = null;
        ObjectTableTypeOrigin objectTableTypeOrigin = null;
        ObjectTableTypeOrigin response = api.updateTypeOrigin(id, objectTableTypeOrigin);
        // TODO: test validations
    }

}
