/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.82.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.api;

import org.ingv.dante.ApiException;
import org.ingv.dante.model.GetCatalog200Response;
import org.ingv.dante.model.GetCatalogMetadata200Response;
import org.ingv.dante.model.GetEvent200Response;
import org.ingv.dante.model.GetEventsGroup200Response;
import org.ingv.dante.model.GetLocalspace200Response;
import org.ingv.dante.model.GetMunicipiDistanceKmPopolazione200Response;
import org.ingv.dante.model.GetMunicipio200Response;
import org.ingv.dante.model.GetOriginFlag200Response;
import org.ingv.dante.model.GetProvenance200Response;
import org.ingv.dante.model.GetRegionName200Response;
import org.ingv.dante.model.GetTypeEvent200Response;
import org.ingv.dante.model.GetTypeMagnitude200Response;
import org.ingv.dante.model.GetTypeOrigin200Response;
import org.ingv.dante.model.ObjectStatus;
import java.time.OffsetDateTime;
import org.ingv.dante.model.Problem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GetApi
 */
@Disabled
public class GetApiTest {

    private final GetApi api = new GetApi();

    /**
     * This API returns all origins with all magnitude; one per line.
     *
     * This API returns all the origins with all magnitudes; one per line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        OffsetDateTime eventupdatedafter = null;
        OffsetDateTime originupdatedafter = null;
        OffsetDateTime magnitudeupdatedafter = null;
        String updatedafteroperator = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        GetEventsGroup200Response response = api.getAll(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, eventupdatedafter, originupdatedafter, magnitudeupdatedafter, updatedafteroperator, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page);
        // TODO: test validations
    }

    /**
     * This API returns the catalogs.
     *
     * This API returns the catalogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCatalogTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        Long eventid = null;
        Long originid = null;
        Long magnitudeid = null;
        String name = null;
        String doi = null;
        String wherenamelike = null;
        GetCatalog200Response response = api.getCatalog(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page, eventid, originid, magnitudeid, name, doi, wherenamelike);
        // TODO: test validations
    }

    /**
     * This API returns the catalog-metadata.
     *
     * This API returns the catalog-metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCatalogMetadataTest() throws ApiException {
        String name = null;
        String doi = null;
        String wherenamelike = null;
        GetCatalogMetadata200Response response = api.getCatalogMetadata(name, doi, wherenamelike);
        // TODO: test validations
    }

    /**
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        Long originid = null;
        Long eventid = null;
        String level = null;
        String orderby = null;
        GetEvent200Response response = api.getEvent(originid, eventid, level, orderby);
        // TODO: test validations
    }

    /**
     * This API returns the preferred origin and the preferred magnitude from the same instance.
     *
     * This API returns the preferred origin and the preferred magnitude from the same instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        OffsetDateTime eventupdatedafter = null;
        OffsetDateTime originupdatedafter = null;
        OffsetDateTime magnitudeupdatedafter = null;
        String updatedafteroperator = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        GetEventsGroup200Response response = api.getEvents(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, eventupdatedafter, originupdatedafter, magnitudeupdatedafter, updatedafteroperator, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page);
        // TODO: test validations
    }

    /**
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsGroupTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        OffsetDateTime eventupdatedafter = null;
        OffsetDateTime originupdatedafter = null;
        OffsetDateTime magnitudeupdatedafter = null;
        String updatedafteroperator = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        GetEventsGroup200Response response = api.getEventsGroup(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, eventupdatedafter, originupdatedafter, magnitudeupdatedafter, updatedafteroperator, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page);
        // TODO: test validations
    }

    /**
     * This API returns all the localspace(s).
     *
     * This API returns all the localspace(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalspaceTest() throws ApiException {
        GetLocalspace200Response response = api.getLocalspace();
        // TODO: test validations
    }

    /**
     * This API returns all origins with own preferred magnitude.
     *
     * This API returns all the origins with own preferred magnitude
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMagnitudesTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        OffsetDateTime eventupdatedafter = null;
        OffsetDateTime originupdatedafter = null;
        OffsetDateTime magnitudeupdatedafter = null;
        String updatedafteroperator = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        GetEventsGroup200Response response = api.getMagnitudes(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, eventupdatedafter, originupdatedafter, magnitudeupdatedafter, updatedafteroperator, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page);
        // TODO: test validations
    }

    /**
     * This API returns the municipi-distance-km-popolazione used at INGV.
     *
     * This API returns the municipi-distance-km-popolazione.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMunicipiDistanceKmPopolazioneTest() throws ApiException {
        Double mindistance = null;
        Double maxdistance = null;
        Long minpopolazione = null;
        Double lat = null;
        Double lon = null;
        GetMunicipiDistanceKmPopolazione200Response response = api.getMunicipiDistanceKmPopolazione(mindistance, maxdistance, minpopolazione, lat, lon);
        // TODO: test validations
    }

    /**
     * This API returns the Italian \&quot;municipio\&quot; information by name.
     *
     * This API returns the Italian \&quot;municipio\&quot; information, by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMunicipioTest() throws ApiException {
        String name = null;
        GetMunicipio200Response response = api.getMunicipio(name);
        // TODO: test validations
    }

    /**
     * This API returns the all the flags assosiated to the originid.
     *
     * This API returns the all the flags assosiated to the originid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginFlagTest() throws ApiException {
        Long originid = null;
        String name = null;
        Long value = null;
        String note = null;
        GetOriginFlag200Response response = api.getOriginFlag(originid, name, value, note);
        // TODO: test validations
    }

    /**
     * This API returns all the preferred origins.
     *
     * This API returns all the preferred origins
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginsTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        Long mintypeoriginvalue = null;
        Long maxtypeoriginvalue = null;
        String wheretypeoriginvaluein = null;
        String wherelocalspacenamein = null;
        String wherelocalspacenameincolumn = null;
        OffsetDateTime eventupdatedafter = null;
        OffsetDateTime originupdatedafter = null;
        OffsetDateTime magnitudeupdatedafter = null;
        String updatedafteroperator = null;
        String whereflagsin = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        Integer limit = null;
        Integer page = null;
        GetEventsGroup200Response response = api.getOrigins(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, mintypeoriginvalue, maxtypeoriginvalue, wheretypeoriginvaluein, wherelocalspacenamein, wherelocalspacenameincolumn, eventupdatedafter, originupdatedafter, magnitudeupdatedafter, updatedafteroperator, whereflagsin, orderby, eventGroupId, idLocalspace, limit, page);
        // TODO: test validations
    }

    /**
     * This API returns all the provenance(s).
     *
     * This API returns all the provenance(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvenanceTest() throws ApiException {
        GetProvenance200Response response = api.getProvenance();
        // TODO: test validations
    }

    /**
     * This API returns the region name used at INGV.
     *
     * This API returns the region name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionNameTest() throws ApiException {
        Double lat = null;
        Double lon = null;
        GetRegionName200Response response = api.getRegionName(lat, lon);
        // TODO: test validations
    }

    /**
     * Return the application status
     *
     * Return the application status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        ObjectStatus response = api.getStatus();
        // TODO: test validations
    }

    /**
     * This API returns all the type_event(s).
     *
     * This API returns all the type_event(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypeEventTest() throws ApiException {
        GetTypeEvent200Response response = api.getTypeEvent();
        // TODO: test validations
    }

    /**
     * This API returns all the type_magnitude(s).
     *
     * This API returns all the type_magnitude(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypeMagnitudeTest() throws ApiException {
        GetTypeMagnitude200Response response = api.getTypeMagnitude();
        // TODO: test validations
    }

    /**
     * This API returns all the type_origin(s).
     *
     * This API returns all the type_origin(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypeOriginTest() throws ApiException {
        GetTypeOrigin200Response response = api.getTypeOrigin();
        // TODO: test validations
    }

}
