/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.45.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.api;

import org.ingv.dante.ApiException;
import org.ingv.dante.model.GetEvent200Response;
import org.ingv.dante.model.GetEventsPref200Response;
import org.ingv.dante.model.GetMunicipiDistanceKmPopolazione200Response;
import org.ingv.dante.model.GetOriginFlag200Response;
import org.ingv.dante.model.GetRegionName200Response;
import org.ingv.dante.model.ObjectStatus;
import java.time.OffsetDateTime;
import org.ingv.dante.model.Problem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GetApi
 */
@Disabled
public class GetApiTest {

    private final GetApi api = new GetApi();

    /**
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        Long originid = null;
        Long eventid = null;
        String level = null;
        GetEvent200Response response = api.getEvent(originid, eventid, level);
        // TODO: test validations
    }

    /**
     * This API returns the preferred origin and the preferred magnitude from the same instance.
     *
     * This API returns the preferred origin and the preferred magnitude from the same instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        String orderby = null;
        Long eventGroupId = null;
        Long idLocalspace = null;
        String wherelocalspacenamein = null;
        Integer limit = null;
        GetEventsPref200Response response = api.getEvents(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, orderby, eventGroupId, idLocalspace, wherelocalspacenamein, limit);
        // TODO: test validations
    }

    /**
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * This API returns the preferred origin and the preferred magnitude from all clusterd events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsPrefTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        String orderby = null;
        Integer limit = null;
        GetEventsPref200Response response = api.getEventsPref(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, orderby, limit);
        // TODO: test validations
    }

    /**
     * This API returns the municipi-distance-km-popolazione used at INGV.
     *
     * This API returns the municipi-distance-km-popolazione.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMunicipiDistanceKmPopolazioneTest() throws ApiException {
        Double mindistance = null;
        Double maxdistance = null;
        Long minpopolazione = null;
        Double lat = null;
        Double lon = null;
        GetMunicipiDistanceKmPopolazione200Response response = api.getMunicipiDistanceKmPopolazione(mindistance, maxdistance, minpopolazione, lat, lon);
        // TODO: test validations
    }

    /**
     * This API returns the all the flags assosiated to the originid.
     *
     * This API returns the all the flags assosiated to the originid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginFlagTest() throws ApiException {
        Long originid = null;
        GetOriginFlag200Response response = api.getOriginFlag(originid);
        // TODO: test validations
    }

    /**
     * This API returns all origins and magnitudes.
     *
     * This API returns all the origins and the magnitudes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOriginsTest() throws ApiException {
        OffsetDateTime starttime = null;
        OffsetDateTime endtime = null;
        Double minlat = null;
        Double maxlat = null;
        Double minlon = null;
        Double maxlon = null;
        Double lat = null;
        Double lon = null;
        Double minradius = null;
        Double maxradius = null;
        Double minradiuskm = null;
        Double maxradiuskm = null;
        Double minmag = null;
        Double maxmag = null;
        Double mindepth = null;
        Double maxdepth = null;
        String orderby = null;
        Long idLocalspace = null;
        String wherelocalspacenamein = null;
        Integer limit = null;
        GetEventsPref200Response response = api.getOrigins(starttime, endtime, minlat, maxlat, minlon, maxlon, lat, lon, minradius, maxradius, minradiuskm, maxradiuskm, minmag, maxmag, mindepth, maxdepth, orderby, idLocalspace, wherelocalspacenamein, limit);
        // TODO: test validations
    }

    /**
     * This API returns the region name used at INGV.
     *
     * This API returns the region name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionNameTest() throws ApiException {
        Double lat = null;
        Double lon = null;
        GetRegionName200Response response = api.getRegionName(lat, lon);
        // TODO: test validations
    }

    /**
     * Return the application status
     *
     * Return the application status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        ObjectStatus response = api.getStatus();
        // TODO: test validations
    }

}
