/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.60.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMomenttensorRcmt;
import org.ingv.dante.model.ObjectMomenttensorTdmt;
import org.ingv.dante.model.ObjectProvenance;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ObjectMomenttensor
 */
public class ObjectMomenttensorTest {
    private final ObjectMomenttensor model = new ObjectMomenttensor();

    /**
     * Model tests for ObjectMomenttensor
     */
    @Test
    public void testObjectMomenttensor() {
        // TODO: test ObjectMomenttensor
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'modified'
     */
    @Test
    public void modifiedTest() {
        // TODO: test modified
    }

    /**
     * Test the property 'inserted'
     */
    @Test
    public void insertedTest() {
        // TODO: test inserted
    }

    /**
     * Test the property 'idLocalspace'
     */
    @Test
    public void idLocalspaceTest() {
        // TODO: test idLocalspace
    }

    /**
     * Test the property 'originidOut'
     */
    @Test
    public void originidOutTest() {
        // TODO: test originidOut
    }

    /**
     * Test the property 'magnitudeidOut'
     */
    @Test
    public void magnitudeidOutTest() {
        // TODO: test magnitudeidOut
    }

    /**
     * Test the property 'scalarmoment'
     */
    @Test
    public void scalarmomentTest() {
        // TODO: test scalarmoment
    }

    /**
     * Test the property 'mrr'
     */
    @Test
    public void mrrTest() {
        // TODO: test mrr
    }

    /**
     * Test the property 'mtt'
     */
    @Test
    public void mttTest() {
        // TODO: test mtt
    }

    /**
     * Test the property 'mpp'
     */
    @Test
    public void mppTest() {
        // TODO: test mpp
    }

    /**
     * Test the property 'mrt'
     */
    @Test
    public void mrtTest() {
        // TODO: test mrt
    }

    /**
     * Test the property 'mrp'
     */
    @Test
    public void mrpTest() {
        // TODO: test mrp
    }

    /**
     * Test the property 'mtp'
     */
    @Test
    public void mtpTest() {
        // TODO: test mtp
    }

    /**
     * Test the property 'clvd'
     */
    @Test
    public void clvdTest() {
        // TODO: test clvd
    }

    /**
     * Test the property 'iso'
     */
    @Test
    public void isoTest() {
        // TODO: test iso
    }

    /**
     * Test the property 'varianceReduction'
     */
    @Test
    public void varianceReductionTest() {
        // TODO: test varianceReduction
    }

    /**
     * Test the property 'doubleCouple'
     */
    @Test
    public void doubleCoupleTest() {
        // TODO: test doubleCouple
    }

    /**
     * Test the property 'typeMomenttensor'
     */
    @Test
    public void typeMomenttensorTest() {
        // TODO: test typeMomenttensor
    }

    /**
     * Test the property 'localspace'
     */
    @Test
    public void localspaceTest() {
        // TODO: test localspace
    }

    /**
     * Test the property 'provenance'
     */
    @Test
    public void provenanceTest() {
        // TODO: test provenance
    }

    /**
     * Test the property 'tdmt'
     */
    @Test
    public void tdmtTest() {
        // TODO: test tdmt
    }

    /**
     * Test the property 'rcmt'
     */
    @Test
    public void rcmtTest() {
        // TODO: test rcmt
    }

}
