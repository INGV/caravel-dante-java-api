/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.48.1
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.ingv.dante.model.StrongmotioniiSchemaEwMessageRSAInner;
import org.ingv.dante.model.TypeOriginName;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for StrongmotioniiSchemaEwMessage
 */
public class StrongmotioniiSchemaEwMessageTest {
    private final StrongmotioniiSchemaEwMessage model = new StrongmotioniiSchemaEwMessage();

    /**
     * Model tests for StrongmotioniiSchemaEwMessage
     */
    @Test
    public void testStrongmotioniiSchemaEwMessage() {
        // TODO: test StrongmotioniiSchemaEwMessage
    }

    /**
     * Test the property 'quakeId'
     */
    @Test
    public void quakeIdTest() {
        // TODO: test quakeId
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'station'
     */
    @Test
    public void stationTest() {
        // TODO: test station
    }

    /**
     * Test the property 'component'
     */
    @Test
    public void componentTest() {
        // TODO: test component
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'qAuthor'
     */
    @Test
    public void qAuthorTest() {
        // TODO: test qAuthor
    }

    /**
     * Test the property 'time'
     */
    @Test
    public void timeTest() {
        // TODO: test time
    }

    /**
     * Test the property 'alternateTime'
     */
    @Test
    public void alternateTimeTest() {
        // TODO: test alternateTime
    }

    /**
     * Test the property 'alternateCode'
     */
    @Test
    public void alternateCodeTest() {
        // TODO: test alternateCode
    }

    /**
     * Test the property 'pga'
     */
    @Test
    public void pgaTest() {
        // TODO: test pga
    }

    /**
     * Test the property 'pgaTime'
     */
    @Test
    public void pgaTimeTest() {
        // TODO: test pgaTime
    }

    /**
     * Test the property 'pgv'
     */
    @Test
    public void pgvTest() {
        // TODO: test pgv
    }

    /**
     * Test the property 'pgvTime'
     */
    @Test
    public void pgvTimeTest() {
        // TODO: test pgvTime
    }

    /**
     * Test the property 'pgd'
     */
    @Test
    public void pgdTest() {
        // TODO: test pgd
    }

    /**
     * Test the property 'pgdTime'
     */
    @Test
    public void pgdTimeTest() {
        // TODO: test pgdTime
    }

    /**
     * Test the property 'RSA'
     */
    @Test
    public void RSATest() {
        // TODO: test RSA
    }

}
