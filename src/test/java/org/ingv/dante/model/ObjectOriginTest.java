/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.60.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.ingv.dante.model.ObjectArrival;
import org.ingv.dante.model.ObjectFocalmechanism;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMagnitude;
import org.ingv.dante.model.ObjectProvenance;
import org.ingv.dante.model.ObjectTypeOrigin;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ObjectOrigin
 */
public class ObjectOriginTest {
    private final ObjectOrigin model = new ObjectOrigin();

    /**
     * Model tests for ObjectOrigin
     */
    @Test
    public void testObjectOrigin() {
        // TODO: test ObjectOrigin
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'modified'
     */
    @Test
    public void modifiedTest() {
        // TODO: test modified
    }

    /**
     * Test the property 'inserted'
     */
    @Test
    public void insertedTest() {
        // TODO: test inserted
    }

    /**
     * Test the property 'idLocalspace'
     */
    @Test
    public void idLocalspaceTest() {
        // TODO: test idLocalspace
    }

    /**
     * Test the property 'azimGap'
     */
    @Test
    public void azimGapTest() {
        // TODO: test azimGap
    }

    /**
     * Test the property 'confidenceLevel'
     */
    @Test
    public void confidenceLevelTest() {
        // TODO: test confidenceLevel
    }

    /**
     * Test the property 'depth'
     */
    @Test
    public void depthTest() {
        // TODO: test depth
    }

    /**
     * Test the property 'e0'
     */
    @Test
    public void e0Test() {
        // TODO: test e0
    }

    /**
     * Test the property 'e0Az'
     */
    @Test
    public void e0AzTest() {
        // TODO: test e0Az
    }

    /**
     * Test the property 'e0Dip'
     */
    @Test
    public void e0DipTest() {
        // TODO: test e0Dip
    }

    /**
     * Test the property 'e1'
     */
    @Test
    public void e1Test() {
        // TODO: test e1
    }

    /**
     * Test the property 'e1Az'
     */
    @Test
    public void e1AzTest() {
        // TODO: test e1Az
    }

    /**
     * Test the property 'e1Dip'
     */
    @Test
    public void e1DipTest() {
        // TODO: test e1Dip
    }

    /**
     * Test the property 'e2'
     */
    @Test
    public void e2Test() {
        // TODO: test e2
    }

    /**
     * Test the property 'e2Az'
     */
    @Test
    public void e2AzTest() {
        // TODO: test e2Az
    }

    /**
     * Test the property 'e2Dip'
     */
    @Test
    public void e2DipTest() {
        // TODO: test e2Dip
    }

    /**
     * Test the property 'errDepth'
     */
    @Test
    public void errDepthTest() {
        // TODO: test errDepth
    }

    /**
     * Test the property 'errH'
     */
    @Test
    public void errHTest() {
        // TODO: test errH
    }

    /**
     * Test the property 'errLat'
     */
    @Test
    public void errLatTest() {
        // TODO: test errLat
    }

    /**
     * Test the property 'errLon'
     */
    @Test
    public void errLonTest() {
        // TODO: test errLon
    }

    /**
     * Test the property 'errOt'
     */
    @Test
    public void errOtTest() {
        // TODO: test errOt
    }

    /**
     * Test the property 'errZ'
     */
    @Test
    public void errZTest() {
        // TODO: test errZ
    }

    /**
     * Test the property 'fixDepth'
     */
    @Test
    public void fixDepthTest() {
        // TODO: test fixDepth
    }

    /**
     * Test the property 'isCentroid'
     */
    @Test
    public void isCentroidTest() {
        // TODO: test isCentroid
    }

    /**
     * Test the property 'lat'
     */
    @Test
    public void latTest() {
        // TODO: test lat
    }

    /**
     * Test the property 'lon'
     */
    @Test
    public void lonTest() {
        // TODO: test lon
    }

    /**
     * Test the property 'maxDistance'
     */
    @Test
    public void maxDistanceTest() {
        // TODO: test maxDistance
    }

    /**
     * Test the property 'medDistance'
     */
    @Test
    public void medDistanceTest() {
        // TODO: test medDistance
    }

    /**
     * Test the property 'minDistance'
     */
    @Test
    public void minDistanceTest() {
        // TODO: test minDistance
    }

    /**
     * Test the property 'nph'
     */
    @Test
    public void nphTest() {
        // TODO: test nph
    }

    /**
     * Test the property 'nphFm'
     */
    @Test
    public void nphFmTest() {
        // TODO: test nphFm
    }

    /**
     * Test the property 'nphS'
     */
    @Test
    public void nphSTest() {
        // TODO: test nphS
    }

    /**
     * Test the property 'nphTot'
     */
    @Test
    public void nphTotTest() {
        // TODO: test nphTot
    }

    /**
     * Test the property 'ot'
     */
    @Test
    public void otTest() {
        // TODO: test ot
    }

    /**
     * Test the property 'quality'
     */
    @Test
    public void qualityTest() {
        // TODO: test quality
    }

    /**
     * Test the property 'qualityNumeric'
     */
    @Test
    public void qualityNumericTest() {
        // TODO: test qualityNumeric
    }

    /**
     * Test the property 'region'
     */
    @Test
    public void regionTest() {
        // TODO: test region
    }

    /**
     * Test the property 'rms'
     */
    @Test
    public void rmsTest() {
        // TODO: test rms
    }

    /**
     * Test the property 'secAzimGap'
     */
    @Test
    public void secAzimGapTest() {
        // TODO: test secAzimGap
    }

    /**
     * Test the property 'wRms'
     */
    @Test
    public void wRmsTest() {
        // TODO: test wRms
    }

    /**
     * Test the property 'typeOrigin'
     */
    @Test
    public void typeOriginTest() {
        // TODO: test typeOrigin
    }

    /**
     * Test the property 'localspace'
     */
    @Test
    public void localspaceTest() {
        // TODO: test localspace
    }

    /**
     * Test the property 'provenance'
     */
    @Test
    public void provenanceTest() {
        // TODO: test provenance
    }

    /**
     * Test the property 'flags'
     */
    @Test
    public void flagsTest() {
        // TODO: test flags
    }

    /**
     * Test the property 'magnitudes'
     */
    @Test
    public void magnitudesTest() {
        // TODO: test magnitudes
    }

    /**
     * Test the property 'arrivals'
     */
    @Test
    public void arrivalsTest() {
        // TODO: test arrivals
    }

    /**
     * Test the property 'focalmechanisms'
     */
    @Test
    public void focalmechanismsTest() {
        // TODO: test focalmechanisms
    }

}
