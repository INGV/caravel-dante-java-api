/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.20.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMomenttensor;
import org.ingv.dante.model.ObjectProvenance;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ObjectFocalmechanism
 */
public class ObjectFocalmechanismTest {
    private final ObjectFocalmechanism model = new ObjectFocalmechanism();

    /**
     * Model tests for ObjectFocalmechanism
     */
    @Test
    public void testObjectFocalmechanism() {
        // TODO: test ObjectFocalmechanism
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'modified'
     */
    @Test
    public void modifiedTest() {
        // TODO: test modified
    }

    /**
     * Test the property 'inserted'
     */
    @Test
    public void insertedTest() {
        // TODO: test inserted
    }

    /**
     * Test the property 'idLocalspace'
     */
    @Test
    public void idLocalspaceTest() {
        // TODO: test idLocalspace
    }

    /**
     * Test the property 'strike1'
     */
    @Test
    public void strike1Test() {
        // TODO: test strike1
    }

    /**
     * Test the property 'dip1'
     */
    @Test
    public void dip1Test() {
        // TODO: test dip1
    }

    /**
     * Test the property 'rake1'
     */
    @Test
    public void rake1Test() {
        // TODO: test rake1
    }

    /**
     * Test the property 'strike2'
     */
    @Test
    public void strike2Test() {
        // TODO: test strike2
    }

    /**
     * Test the property 'dip2'
     */
    @Test
    public void dip2Test() {
        // TODO: test dip2
    }

    /**
     * Test the property 'rake2'
     */
    @Test
    public void rake2Test() {
        // TODO: test rake2
    }

    /**
     * Test the property 'azimGap'
     */
    @Test
    public void azimGapTest() {
        // TODO: test azimGap
    }

    /**
     * Test the property 'nstaPolarity'
     */
    @Test
    public void nstaPolarityTest() {
        // TODO: test nstaPolarity
    }

    /**
     * Test the property 'misfit'
     */
    @Test
    public void misfitTest() {
        // TODO: test misfit
    }

    /**
     * Test the property 'stdr'
     */
    @Test
    public void stdrTest() {
        // TODO: test stdr
    }

    /**
     * Test the property 'rmsAngDiffAccPref'
     */
    @Test
    public void rmsAngDiffAccPrefTest() {
        // TODO: test rmsAngDiffAccPref
    }

    /**
     * Test the property 'fracAcc30degPref'
     */
    @Test
    public void fracAcc30degPrefTest() {
        // TODO: test fracAcc30degPref
    }

    /**
     * Test the property 'quality'
     */
    @Test
    public void qualityTest() {
        // TODO: test quality
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'momenttensor'
     */
    @Test
    public void momenttensorTest() {
        // TODO: test momenttensor
    }

    /**
     * Test the property 'localspace'
     */
    @Test
    public void localspaceTest() {
        // TODO: test localspace
    }

    /**
     * Test the property 'provenance'
     */
    @Test
    public void provenanceTest() {
        // TODO: test provenance
    }

}
