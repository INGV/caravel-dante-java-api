/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.85.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.ingv.dante.model.ObjectProvenaceForMagnitudesOriginsEventsAndEventsGroup;
import org.ingv.dante.model.ObjectTypeOrigin;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
 */
public class ObjectOriginForMagnitudesOriginsEventsAndEventsGroupTest {
    private final ObjectOriginForMagnitudesOriginsEventsAndEventsGroup model = new ObjectOriginForMagnitudesOriginsEventsAndEventsGroup();

    /**
     * Model tests for ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
     */
    @Test
    public void testObjectOriginForMagnitudesOriginsEventsAndEventsGroup() {
        // TODO: test ObjectOriginForMagnitudesOriginsEventsAndEventsGroup
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'idLocalspace'
     */
    @Test
    public void idLocalspaceTest() {
        // TODO: test idLocalspace
    }

    /**
     * Test the property 'localspace'
     */
    @Test
    public void localspaceTest() {
        // TODO: test localspace
    }

    /**
     * Test the property 'ot'
     */
    @Test
    public void otTest() {
        // TODO: test ot
    }

    /**
     * Test the property 'lat'
     */
    @Test
    public void latTest() {
        // TODO: test lat
    }

    /**
     * Test the property 'lon'
     */
    @Test
    public void lonTest() {
        // TODO: test lon
    }

    /**
     * Test the property 'depth'
     */
    @Test
    public void depthTest() {
        // TODO: test depth
    }

    /**
     * Test the property 'errOt'
     */
    @Test
    public void errOtTest() {
        // TODO: test errOt
    }

    /**
     * Test the property 'errH'
     */
    @Test
    public void errHTest() {
        // TODO: test errH
    }

    /**
     * Test the property 'errZ'
     */
    @Test
    public void errZTest() {
        // TODO: test errZ
    }

    /**
     * Test the property 'errLat'
     */
    @Test
    public void errLatTest() {
        // TODO: test errLat
    }

    /**
     * Test the property 'errLon'
     */
    @Test
    public void errLonTest() {
        // TODO: test errLon
    }

    /**
     * Test the property 'quality'
     */
    @Test
    public void qualityTest() {
        // TODO: test quality
    }

    /**
     * Test the property 'associatedPhaseCount'
     */
    @Test
    public void associatedPhaseCountTest() {
        // TODO: test associatedPhaseCount
    }

    /**
     * Test the property 'associatedStationCount'
     */
    @Test
    public void associatedStationCountTest() {
        // TODO: test associatedStationCount
    }

    /**
     * Test the property 'usedPhaseCount'
     */
    @Test
    public void usedPhaseCountTest() {
        // TODO: test usedPhaseCount
    }

    /**
     * Test the property 'usedStationCount'
     */
    @Test
    public void usedStationCountTest() {
        // TODO: test usedStationCount
    }

    /**
     * Test the property 'region'
     */
    @Test
    public void regionTest() {
        // TODO: test region
    }

    /**
     * Test the property 'modified'
     */
    @Test
    public void modifiedTest() {
        // TODO: test modified
    }

    /**
     * Test the property 'inserted'
     */
    @Test
    public void insertedTest() {
        // TODO: test inserted
    }

    /**
     * Test the property 'typeOrigin'
     */
    @Test
    public void typeOriginTest() {
        // TODO: test typeOrigin
    }

    /**
     * Test the property 'provenance'
     */
    @Test
    public void provenanceTest() {
        // TODO: test provenance
    }

}
