/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 3.20.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ingv.dante.model.Hyp2000arcPhasesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Hyp2000arcSchemaEwMessage
 */
public class Hyp2000arcSchemaEwMessageTest {
    private final Hyp2000arcSchemaEwMessage model = new Hyp2000arcSchemaEwMessage();

    /**
     * Model tests for Hyp2000arcSchemaEwMessage
     */
    @Test
    public void testHyp2000arcSchemaEwMessage() {
        // TODO: test Hyp2000arcSchemaEwMessage
    }

    /**
     * Test the property 'quakeId'
     */
    @Test
    public void quakeIdTest() {
        // TODO: test quakeId
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'originId'
     */
    @Test
    public void originIdTest() {
        // TODO: test originId
    }

    /**
     * Test the property 'originTime'
     */
    @Test
    public void originTimeTest() {
        // TODO: test originTime
    }

    /**
     * Test the property 'latitude'
     */
    @Test
    public void latitudeTest() {
        // TODO: test latitude
    }

    /**
     * Test the property 'longitude'
     */
    @Test
    public void longitudeTest() {
        // TODO: test longitude
    }

    /**
     * Test the property 'depth'
     */
    @Test
    public void depthTest() {
        // TODO: test depth
    }

    /**
     * Test the property 'nph'
     */
    @Test
    public void nphTest() {
        // TODO: test nph
    }

    /**
     * Test the property 'nphS'
     */
    @Test
    public void nphSTest() {
        // TODO: test nphS
    }

    /**
     * Test the property 'nphtot'
     */
    @Test
    public void nphtotTest() {
        // TODO: test nphtot
    }

    /**
     * Test the property 'nPfm'
     */
    @Test
    public void nPfmTest() {
        // TODO: test nPfm
    }

    /**
     * Test the property 'gap'
     */
    @Test
    public void gapTest() {
        // TODO: test gap
    }

    /**
     * Test the property 'dmin'
     */
    @Test
    public void dminTest() {
        // TODO: test dmin
    }

    /**
     * Test the property 'rms'
     */
    @Test
    public void rmsTest() {
        // TODO: test rms
    }

    /**
     * Test the property 'e0az'
     */
    @Test
    public void e0azTest() {
        // TODO: test e0az
    }

    /**
     * Test the property 'e0dp'
     */
    @Test
    public void e0dpTest() {
        // TODO: test e0dp
    }

    /**
     * Test the property 'e0'
     */
    @Test
    public void e0Test() {
        // TODO: test e0
    }

    /**
     * Test the property 'e1az'
     */
    @Test
    public void e1azTest() {
        // TODO: test e1az
    }

    /**
     * Test the property 'e1dp'
     */
    @Test
    public void e1dpTest() {
        // TODO: test e1dp
    }

    /**
     * Test the property 'e1'
     */
    @Test
    public void e1Test() {
        // TODO: test e1
    }

    /**
     * Test the property 'e2'
     */
    @Test
    public void e2Test() {
        // TODO: test e2
    }

    /**
     * Test the property 'erh'
     */
    @Test
    public void erhTest() {
        // TODO: test erh
    }

    /**
     * Test the property 'erz'
     */
    @Test
    public void erzTest() {
        // TODO: test erz
    }

    /**
     * Test the property 'md'
     */
    @Test
    public void mdTest() {
        // TODO: test md
    }

    /**
     * Test the property 'reg'
     */
    @Test
    public void regTest() {
        // TODO: test reg
    }

    /**
     * Test the property 'labelpref'
     */
    @Test
    public void labelprefTest() {
        // TODO: test labelpref
    }

    /**
     * Test the property 'mpref'
     */
    @Test
    public void mprefTest() {
        // TODO: test mpref
    }

    /**
     * Test the property 'wtpref'
     */
    @Test
    public void wtprefTest() {
        // TODO: test wtpref
    }

    /**
     * Test the property 'mdtype'
     */
    @Test
    public void mdtypeTest() {
        // TODO: test mdtype
    }

    /**
     * Test the property 'mdmad'
     */
    @Test
    public void mdmadTest() {
        // TODO: test mdmad
    }

    /**
     * Test the property 'mdwt'
     */
    @Test
    public void mdwtTest() {
        // TODO: test mdwt
    }

    /**
     * Test the property 'ingvQuality'
     */
    @Test
    public void ingvQualityTest() {
        // TODO: test ingvQuality
    }

    /**
     * Test the property 'amplitudeMagnitude'
     */
    @Test
    public void amplitudeMagnitudeTest() {
        // TODO: test amplitudeMagnitude
    }

    /**
     * Test the property 'numberOfAmpMagWeightCode'
     */
    @Test
    public void numberOfAmpMagWeightCodeTest() {
        // TODO: test numberOfAmpMagWeightCode
    }

    /**
     * Test the property 'medianAbsDiffAmpMag'
     */
    @Test
    public void medianAbsDiffAmpMagTest() {
        // TODO: test medianAbsDiffAmpMag
    }

    /**
     * Test the property 'preferredMagLabel'
     */
    @Test
    public void preferredMagLabelTest() {
        // TODO: test preferredMagLabel
    }

    /**
     * Test the property 'preferredMag'
     */
    @Test
    public void preferredMagTest() {
        // TODO: test preferredMag
    }

    /**
     * Test the property 'numberOfPreferredMags'
     */
    @Test
    public void numberOfPreferredMagsTest() {
        // TODO: test numberOfPreferredMags
    }

    /**
     * Test the property 'phases'
     */
    @Test
    public void phasesTest() {
        // TODO: test phases
    }

}
