/*
 * Dante Web Services
 * # Introduction  Dante is a RESTful API service designed to interact with seismic data stored in the **quakedb** database schema used at INGV. Dante can be extended to other database schemas by creating custom `Model` and `Controller` implementations.  Dante provides a set of routes to store message: **event**, **origin**, **magnitude**, **arrival**, **...**.  ## Input  Dante accepts: - A `json` message (view '**store**' spec below). - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module.  ## Output  Dante exposes RESTful routes for each database table and implements three specialized endpoints: - `/events-group`: returns the preferred origin and magnitude for all clustered events. - `/events`: returns the preferred origin and magnitude for a single event instance. - `/event`: returns the full event details (event, origins, magnitudes, arrivals, amplitudes, etc.) based on an **eventid** or **originid**. 
 *
 * The version of the OpenAPI document: 3.48.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.auth;

import org.ingv.dante.ApiException;
import org.ingv.dante.Pair;

import java.net.URI;
import java.util.Map;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ApiKeyAuth implements Authentication {
  private final String location;
  private final String paramName;

  private String apiKey;
  private String apiKeyPrefix;

  public ApiKeyAuth(String location, String paramName) {
    this.location = location;
    this.paramName = paramName;
  }

  public String getLocation() {
    return location;
  }

  public String getParamName() {
    return paramName;
  }

  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }

  public String getApiKeyPrefix() {
    return apiKeyPrefix;
  }

  public void setApiKeyPrefix(String apiKeyPrefix) {
    this.apiKeyPrefix = apiKeyPrefix;
  }

  @Override
  public void applyToParams(List<Pair> queryParams, Map<String, String> headerParams, Map<String, String> cookieParams,
                           String payload, String method, URI uri) throws ApiException {
    if (apiKey == null) {
      return;
    }
    String value;
    if (apiKeyPrefix != null) {
      value = apiKeyPrefix + " " + apiKey;
    } else {
      value = apiKey;
    }
    if ("query".equals(location)) {
      queryParams.add(new Pair(paramName, value));
    } else if ("header".equals(location)) {
      headerParams.put(paramName, value);
    } else if ("cookie".equals(location)) {
      cookieParams.put(paramName, value);
    }
  }
}
