/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.78.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.ingv.dante.model.ObjectLocalspace;
import org.ingv.dante.model.ObjectMomenttensorRcmt;
import org.ingv.dante.model.ObjectMomenttensorTdmt;
import org.ingv.dante.model.ObjectProvenance;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectMomenttensor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-01T14:59:53.862116Z[Etc/UTC]")
public class ObjectMomenttensor {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public static final String SERIALIZED_NAME_ID_LOCALSPACE = "id_localspace";
  @SerializedName(SERIALIZED_NAME_ID_LOCALSPACE)
  private Long idLocalspace;

  public static final String SERIALIZED_NAME_ORIGINID_OUT = "originid_out";
  @SerializedName(SERIALIZED_NAME_ORIGINID_OUT)
  private Long originidOut;

  public static final String SERIALIZED_NAME_MAGNITUDEID_OUT = "magnitudeid_out";
  @SerializedName(SERIALIZED_NAME_MAGNITUDEID_OUT)
  private Long magnitudeidOut;

  public static final String SERIALIZED_NAME_SCALARMOMENT = "scalarmoment";
  @SerializedName(SERIALIZED_NAME_SCALARMOMENT)
  private Double scalarmoment;

  public static final String SERIALIZED_NAME_MRR = "mrr";
  @SerializedName(SERIALIZED_NAME_MRR)
  private Double mrr;

  public static final String SERIALIZED_NAME_MTT = "mtt";
  @SerializedName(SERIALIZED_NAME_MTT)
  private Double mtt;

  public static final String SERIALIZED_NAME_MPP = "mpp";
  @SerializedName(SERIALIZED_NAME_MPP)
  private Double mpp;

  public static final String SERIALIZED_NAME_MRT = "mrt";
  @SerializedName(SERIALIZED_NAME_MRT)
  private Double mrt;

  public static final String SERIALIZED_NAME_MRP = "mrp";
  @SerializedName(SERIALIZED_NAME_MRP)
  private Double mrp;

  public static final String SERIALIZED_NAME_MTP = "mtp";
  @SerializedName(SERIALIZED_NAME_MTP)
  private Double mtp;

  public static final String SERIALIZED_NAME_CLVD = "clvd";
  @SerializedName(SERIALIZED_NAME_CLVD)
  private Double clvd;

  public static final String SERIALIZED_NAME_ISO = "iso";
  @SerializedName(SERIALIZED_NAME_ISO)
  private Double iso;

  public static final String SERIALIZED_NAME_VARIANCE_REDUCTION = "variance_reduction";
  @SerializedName(SERIALIZED_NAME_VARIANCE_REDUCTION)
  private Double varianceReduction;

  public static final String SERIALIZED_NAME_DOUBLE_COUPLE = "double_couple";
  @SerializedName(SERIALIZED_NAME_DOUBLE_COUPLE)
  private Double doubleCouple;

  public static final String SERIALIZED_NAME_TYPE_MOMENTTENSOR = "type_momenttensor";
  @SerializedName(SERIALIZED_NAME_TYPE_MOMENTTENSOR)
  private String typeMomenttensor;

  public static final String SERIALIZED_NAME_LOCALSPACE = "localspace";
  @SerializedName(SERIALIZED_NAME_LOCALSPACE)
  private ObjectLocalspace localspace;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ObjectProvenance provenance;

  public static final String SERIALIZED_NAME_TDMT = "tdmt";
  @SerializedName(SERIALIZED_NAME_TDMT)
  private ObjectMomenttensorTdmt tdmt;

  public static final String SERIALIZED_NAME_RCMT = "rcmt";
  @SerializedName(SERIALIZED_NAME_RCMT)
  private ObjectMomenttensorRcmt rcmt;

  public ObjectMomenttensor() {
  }

  
  public ObjectMomenttensor(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14932631", value = "Unique incremental id | bigint(20)")

  public Long getId() {
    return id;
  }




   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-06-22T16:52:06.260Z", value = "Last Review | timestamp")

  public OffsetDateTime getModified() {
    return modified;
  }




   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-06-22T16:52:06.260Z", value = "Insert time | timestamp")

  public OffsetDateTime getInserted() {
    return inserted;
  }




  public ObjectMomenttensor idLocalspace(Long idLocalspace) {
    
    this.idLocalspace = idLocalspace;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return idLocalspace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "182491", value = "Localspace Id | bigint(19)")

  public Long getIdLocalspace() {
    return idLocalspace;
  }


  public void setIdLocalspace(Long idLocalspace) {
    this.idLocalspace = idLocalspace;
  }


  public ObjectMomenttensor originidOut(Long originidOut) {
    
    this.originidOut = originidOut;
    return this;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return originidOut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14932631", value = "Unique incremental id | bigint(20)")

  public Long getOriginidOut() {
    return originidOut;
  }


  public void setOriginidOut(Long originidOut) {
    this.originidOut = originidOut;
  }


  public ObjectMomenttensor magnitudeidOut(Long magnitudeidOut) {
    
    this.magnitudeidOut = magnitudeidOut;
    return this;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return magnitudeidOut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14932631", value = "Unique incremental id | bigint(20)")

  public Long getMagnitudeidOut() {
    return magnitudeidOut;
  }


  public void setMagnitudeidOut(Long magnitudeidOut) {
    this.magnitudeidOut = magnitudeidOut;
  }


  public ObjectMomenttensor scalarmoment(Double scalarmoment) {
    
    this.scalarmoment = scalarmoment;
    return this;
  }

   /**
   * Scalar moment as derived in moment tensor inversion. Unit, Nm | double(22)
   * @return scalarmoment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "16607495309062.705", value = "Scalar moment as derived in moment tensor inversion. Unit, Nm | double(22)")

  public Double getScalarmoment() {
    return scalarmoment;
  }


  public void setScalarmoment(Double scalarmoment) {
    this.scalarmoment = scalarmoment;
  }


  public ObjectMomenttensor mrr(Double mrr) {
    
    this.mrr = mrr;
    return this;
  }

   /**
   * mrr moment tensor component | double(22)
   * @return mrr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "80.956", value = "mrr moment tensor component | double(22)")

  public Double getMrr() {
    return mrr;
  }


  public void setMrr(Double mrr) {
    this.mrr = mrr;
  }


  public ObjectMomenttensor mtt(Double mtt) {
    
    this.mtt = mtt;
    return this;
  }

   /**
   * mtt moment tensor component | double(22)
   * @return mtt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-25.017", value = "mtt moment tensor component | double(22)")

  public Double getMtt() {
    return mtt;
  }


  public void setMtt(Double mtt) {
    this.mtt = mtt;
  }


  public ObjectMomenttensor mpp(Double mpp) {
    
    this.mpp = mpp;
    return this;
  }

   /**
   * mpp moment tensor component | double(22)
   * @return mpp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-55.939", value = "mpp moment tensor component | double(22)")

  public Double getMpp() {
    return mpp;
  }


  public void setMpp(Double mpp) {
    this.mpp = mpp;
  }


  public ObjectMomenttensor mrt(Double mrt) {
    
    this.mrt = mrt;
    return this;
  }

   /**
   * mrt moment tensor component | double(22)
   * @return mrt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7.048", value = "mrt moment tensor component | double(22)")

  public Double getMrt() {
    return mrt;
  }


  public void setMrt(Double mrt) {
    this.mrt = mrt;
  }


  public ObjectMomenttensor mrp(Double mrp) {
    
    this.mrp = mrp;
    return this;
  }

   /**
   * mrp moment tensor component | double(22)
   * @return mrp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13.494", value = "mrp moment tensor component | double(22)")

  public Double getMrp() {
    return mrp;
  }


  public void setMrp(Double mrp) {
    this.mrp = mrp;
  }


  public ObjectMomenttensor mtp(Double mtp) {
    
    this.mtp = mtp;
    return this;
  }

   /**
   * mtp moment tensor component | double(22)
   * @return mtp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-49.466", value = "mtp moment tensor component | double(22)")

  public Double getMtp() {
    return mtp;
  }


  public void setMtp(Double mtp) {
    this.mtp = mtp;
  }


  public ObjectMomenttensor clvd(Double clvd) {
    
    this.clvd = clvd;
    return this;
  }

   /**
   * CLVD (compensated linear vector dipole) parameter obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)
   * @return clvd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.24", value = "CLVD (compensated linear vector dipole) parameter obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)")

  public Double getClvd() {
    return clvd;
  }


  public void setClvd(Double clvd) {
    this.clvd = clvd;
  }


  public ObjectMomenttensor iso(Double iso) {
    
    this.iso = iso;
    return this;
  }

   /**
   * Isotropic part obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)
   * @return iso
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Isotropic part obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)")

  public Double getIso() {
    return iso;
  }


  public void setIso(Double iso) {
    this.iso = iso;
  }


  public ObjectMomenttensor varianceReduction(Double varianceReduction) {
    
    this.varianceReduction = varianceReduction;
    return this;
  }

   /**
   * Variance reduction of moment tensor inversion, given in percent (Dreger 2003). This is a goodness-of-fit measure | double(22)
   * @return varianceReduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "41.15", value = "Variance reduction of moment tensor inversion, given in percent (Dreger 2003). This is a goodness-of-fit measure | double(22)")

  public Double getVarianceReduction() {
    return varianceReduction;
  }


  public void setVarianceReduction(Double varianceReduction) {
    this.varianceReduction = varianceReduction;
  }


  public ObjectMomenttensor doubleCouple(Double doubleCouple) {
    
    this.doubleCouple = doubleCouple;
    return this;
  }

   /**
   * Double couple parameter obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)
   * @return doubleCouple
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.76", value = "Double couple parameter obtained from moment tensor inversion (decimal fraction between 0 and 1) | double(22)")

  public Double getDoubleCouple() {
    return doubleCouple;
  }


  public void setDoubleCouple(Double doubleCouple) {
    this.doubleCouple = doubleCouple;
  }


  public ObjectMomenttensor typeMomenttensor(String typeMomenttensor) {
    
    this.typeMomenttensor = typeMomenttensor;
    return this;
  }

   /**
   * Type of Moment Tensor | varchar(50)
   * @return typeMomenttensor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TDMT", value = "Type of Moment Tensor | varchar(50)")

  public String getTypeMomenttensor() {
    return typeMomenttensor;
  }


  public void setTypeMomenttensor(String typeMomenttensor) {
    this.typeMomenttensor = typeMomenttensor;
  }


  public ObjectMomenttensor localspace(ObjectLocalspace localspace) {
    
    this.localspace = localspace;
    return this;
  }

   /**
   * Get localspace
   * @return localspace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectLocalspace getLocalspace() {
    return localspace;
  }


  public void setLocalspace(ObjectLocalspace localspace) {
    this.localspace = localspace;
  }


  public ObjectMomenttensor provenance(ObjectProvenance provenance) {
    
    this.provenance = provenance;
    return this;
  }

   /**
   * Get provenance
   * @return provenance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectProvenance getProvenance() {
    return provenance;
  }


  public void setProvenance(ObjectProvenance provenance) {
    this.provenance = provenance;
  }


  public ObjectMomenttensor tdmt(ObjectMomenttensorTdmt tdmt) {
    
    this.tdmt = tdmt;
    return this;
  }

   /**
   * Get tdmt
   * @return tdmt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectMomenttensorTdmt getTdmt() {
    return tdmt;
  }


  public void setTdmt(ObjectMomenttensorTdmt tdmt) {
    this.tdmt = tdmt;
  }


  public ObjectMomenttensor rcmt(ObjectMomenttensorRcmt rcmt) {
    
    this.rcmt = rcmt;
    return this;
  }

   /**
   * Get rcmt
   * @return rcmt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectMomenttensorRcmt getRcmt() {
    return rcmt;
  }


  public void setRcmt(ObjectMomenttensorRcmt rcmt) {
    this.rcmt = rcmt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public ObjectMomenttensor putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMomenttensor objectMomenttensor = (ObjectMomenttensor) o;
    return Objects.equals(this.id, objectMomenttensor.id) &&
        Objects.equals(this.modified, objectMomenttensor.modified) &&
        Objects.equals(this.inserted, objectMomenttensor.inserted) &&
        Objects.equals(this.idLocalspace, objectMomenttensor.idLocalspace) &&
        Objects.equals(this.originidOut, objectMomenttensor.originidOut) &&
        Objects.equals(this.magnitudeidOut, objectMomenttensor.magnitudeidOut) &&
        Objects.equals(this.scalarmoment, objectMomenttensor.scalarmoment) &&
        Objects.equals(this.mrr, objectMomenttensor.mrr) &&
        Objects.equals(this.mtt, objectMomenttensor.mtt) &&
        Objects.equals(this.mpp, objectMomenttensor.mpp) &&
        Objects.equals(this.mrt, objectMomenttensor.mrt) &&
        Objects.equals(this.mrp, objectMomenttensor.mrp) &&
        Objects.equals(this.mtp, objectMomenttensor.mtp) &&
        Objects.equals(this.clvd, objectMomenttensor.clvd) &&
        Objects.equals(this.iso, objectMomenttensor.iso) &&
        Objects.equals(this.varianceReduction, objectMomenttensor.varianceReduction) &&
        Objects.equals(this.doubleCouple, objectMomenttensor.doubleCouple) &&
        Objects.equals(this.typeMomenttensor, objectMomenttensor.typeMomenttensor) &&
        Objects.equals(this.localspace, objectMomenttensor.localspace) &&
        Objects.equals(this.provenance, objectMomenttensor.provenance) &&
        Objects.equals(this.tdmt, objectMomenttensor.tdmt) &&
        Objects.equals(this.rcmt, objectMomenttensor.rcmt)&&
        Objects.equals(this.additionalProperties, objectMomenttensor.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, modified, inserted, idLocalspace, originidOut, magnitudeidOut, scalarmoment, mrr, mtt, mpp, mrt, mrp, mtp, clvd, iso, varianceReduction, doubleCouple, typeMomenttensor, localspace, provenance, tdmt, rcmt, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMomenttensor {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    idLocalspace: ").append(toIndentedString(idLocalspace)).append("\n");
    sb.append("    originidOut: ").append(toIndentedString(originidOut)).append("\n");
    sb.append("    magnitudeidOut: ").append(toIndentedString(magnitudeidOut)).append("\n");
    sb.append("    scalarmoment: ").append(toIndentedString(scalarmoment)).append("\n");
    sb.append("    mrr: ").append(toIndentedString(mrr)).append("\n");
    sb.append("    mtt: ").append(toIndentedString(mtt)).append("\n");
    sb.append("    mpp: ").append(toIndentedString(mpp)).append("\n");
    sb.append("    mrt: ").append(toIndentedString(mrt)).append("\n");
    sb.append("    mrp: ").append(toIndentedString(mrp)).append("\n");
    sb.append("    mtp: ").append(toIndentedString(mtp)).append("\n");
    sb.append("    clvd: ").append(toIndentedString(clvd)).append("\n");
    sb.append("    iso: ").append(toIndentedString(iso)).append("\n");
    sb.append("    varianceReduction: ").append(toIndentedString(varianceReduction)).append("\n");
    sb.append("    doubleCouple: ").append(toIndentedString(doubleCouple)).append("\n");
    sb.append("    typeMomenttensor: ").append(toIndentedString(typeMomenttensor)).append("\n");
    sb.append("    localspace: ").append(toIndentedString(localspace)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    tdmt: ").append(toIndentedString(tdmt)).append("\n");
    sb.append("    rcmt: ").append(toIndentedString(rcmt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("inserted");
    openapiFields.add("id_localspace");
    openapiFields.add("originid_out");
    openapiFields.add("magnitudeid_out");
    openapiFields.add("scalarmoment");
    openapiFields.add("mrr");
    openapiFields.add("mtt");
    openapiFields.add("mpp");
    openapiFields.add("mrt");
    openapiFields.add("mrp");
    openapiFields.add("mtp");
    openapiFields.add("clvd");
    openapiFields.add("iso");
    openapiFields.add("variance_reduction");
    openapiFields.add("double_couple");
    openapiFields.add("type_momenttensor");
    openapiFields.add("localspace");
    openapiFields.add("provenance");
    openapiFields.add("tdmt");
    openapiFields.add("rcmt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObjectMomenttensor
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ObjectMomenttensor.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectMomenttensor is not found in the empty JSON string", ObjectMomenttensor.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type_momenttensor") != null && !jsonObj.get("type_momenttensor").isJsonNull()) && !jsonObj.get("type_momenttensor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_momenttensor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_momenttensor").toString()));
      }
      // validate the optional field `localspace`
      if (jsonObj.get("localspace") != null && !jsonObj.get("localspace").isJsonNull()) {
        ObjectLocalspace.validateJsonObject(jsonObj.getAsJsonObject("localspace"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ObjectProvenance.validateJsonObject(jsonObj.getAsJsonObject("provenance"));
      }
      // validate the optional field `tdmt`
      if (jsonObj.get("tdmt") != null && !jsonObj.get("tdmt").isJsonNull()) {
        ObjectMomenttensorTdmt.validateJsonObject(jsonObj.getAsJsonObject("tdmt"));
      }
      // validate the optional field `rcmt`
      if (jsonObj.get("rcmt") != null && !jsonObj.get("rcmt").isJsonNull()) {
        ObjectMomenttensorRcmt.validateJsonObject(jsonObj.getAsJsonObject("rcmt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectMomenttensor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectMomenttensor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectMomenttensor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectMomenttensor.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectMomenttensor>() {
           @Override
           public void write(JsonWriter out, ObjectMomenttensor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectMomenttensor read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ObjectMomenttensor instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectMomenttensor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectMomenttensor
  * @throws IOException if the JSON string is invalid with respect to ObjectMomenttensor
  */
  public static ObjectMomenttensor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectMomenttensor.class);
  }

 /**
  * Convert an instance of ObjectMomenttensor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

