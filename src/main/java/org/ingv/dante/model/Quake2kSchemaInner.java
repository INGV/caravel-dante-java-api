/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.ingv.dante.model.Quake2kSchemaInnerAllOf;
import org.ingv.dante.model.Quake2kSchemaInnerAllOf1;
import org.ingv.dante.model.Quake2kSchemaInnerAllOf1EwLogo;
import org.ingv.dante.model.Quake2kSchemaInnerAllOfEwMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * Quake2kSchemaInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-17T09:58:20.631465Z[Etc/UTC]")
public class Quake2kSchemaInner {
  public static final String SERIALIZED_NAME_EW_MESSAGE = "ewMessage";
  @SerializedName(SERIALIZED_NAME_EW_MESSAGE)
  private Quake2kSchemaInnerAllOfEwMessage ewMessage;

  public static final String SERIALIZED_NAME_EW_LOGO = "ewLogo";
  @SerializedName(SERIALIZED_NAME_EW_LOGO)
  private Quake2kSchemaInnerAllOf1EwLogo ewLogo;

  public Quake2kSchemaInner() { 
  }

  public Quake2kSchemaInner ewMessage(Quake2kSchemaInnerAllOfEwMessage ewMessage) {
    
    this.ewMessage = ewMessage;
    return this;
  }

   /**
   * Get ewMessage
   * @return ewMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Quake2kSchemaInnerAllOfEwMessage getEwMessage() {
    return ewMessage;
  }


  public void setEwMessage(Quake2kSchemaInnerAllOfEwMessage ewMessage) {
    this.ewMessage = ewMessage;
  }


  public Quake2kSchemaInner ewLogo(Quake2kSchemaInnerAllOf1EwLogo ewLogo) {
    
    this.ewLogo = ewLogo;
    return this;
  }

   /**
   * Get ewLogo
   * @return ewLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Quake2kSchemaInnerAllOf1EwLogo getEwLogo() {
    return ewLogo;
  }


  public void setEwLogo(Quake2kSchemaInnerAllOf1EwLogo ewLogo) {
    this.ewLogo = ewLogo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quake2kSchemaInner quake2kSchemaInner = (Quake2kSchemaInner) o;
    return Objects.equals(this.ewMessage, quake2kSchemaInner.ewMessage) &&
        Objects.equals(this.ewLogo, quake2kSchemaInner.ewLogo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ewMessage, ewLogo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quake2kSchemaInner {\n");
    sb.append("    ewMessage: ").append(toIndentedString(ewMessage)).append("\n");
    sb.append("    ewLogo: ").append(toIndentedString(ewLogo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ewMessage");
    openapiFields.add("ewLogo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Quake2kSchemaInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Quake2kSchemaInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quake2kSchemaInner is not found in the empty JSON string", Quake2kSchemaInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Quake2kSchemaInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quake2kSchemaInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `ewMessage`
      if (jsonObj.getAsJsonObject("ewMessage") != null) {
        Quake2kSchemaInnerAllOfEwMessage.validateJsonObject(jsonObj.getAsJsonObject("ewMessage"));
      }
      // validate the optional field `ewLogo`
      if (jsonObj.getAsJsonObject("ewLogo") != null) {
        Quake2kSchemaInnerAllOf1EwLogo.validateJsonObject(jsonObj.getAsJsonObject("ewLogo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quake2kSchemaInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quake2kSchemaInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quake2kSchemaInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quake2kSchemaInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Quake2kSchemaInner>() {
           @Override
           public void write(JsonWriter out, Quake2kSchemaInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quake2kSchemaInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Quake2kSchemaInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Quake2kSchemaInner
  * @throws IOException if the JSON string is invalid with respect to Quake2kSchemaInner
  */
  public static Quake2kSchemaInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quake2kSchemaInner.class);
  }

 /**
  * Convert an instance of Quake2kSchemaInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

