/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.73.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.ingv.dante.model.TypeOriginName;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectTableTypeOrigin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-17T12:10:25.692141Z[Etc/UTC]")
public class ObjectTableTypeOrigin {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private TypeOriginName name = TypeOriginName.HYPOCENTER;

  public static final String SERIALIZED_NAME_VERSION_NAME = "version_name";
  @SerializedName(SERIALIZED_NAME_VERSION_NAME)
  private String versionName;

  public static final String SERIALIZED_NAME_VERSION_VALUE = "version_value";
  @SerializedName(SERIALIZED_NAME_VERSION_VALUE)
  private Long versionValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Long priority = 0l;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_INSERTED = "inserted";
  @SerializedName(SERIALIZED_NAME_INSERTED)
  private OffsetDateTime inserted;

  public ObjectTableTypeOrigin() {
  }

  
  public ObjectTableTypeOrigin(
     Long id, 
     OffsetDateTime modified, 
     OffsetDateTime inserted
  ) {
    this();
    this.id = id;
    this.modified = modified;
    this.inserted = inserted;
  }

   /**
   * Unique incremental id | bigint(20)
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14932631", value = "Unique incremental id | bigint(20)")

  public Long getId() {
    return id;
  }




  public ObjectTableTypeOrigin name(TypeOriginName name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeOriginName getName() {
    return name;
  }


  public void setName(TypeOriginName name) {
    this.name = name;
  }


  public ObjectTableTypeOrigin versionName(String versionName) {
    
    this.versionName = versionName;
    return this;
  }

   /**
   * Localization name (es:ew prelim,XX,WW,..) | varchar(255)
   * @return versionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ew prelim", value = "Localization name (es:ew prelim,XX,WW,..) | varchar(255)")

  public String getVersionName() {
    return versionName;
  }


  public void setVersionName(String versionName) {
    this.versionName = versionName;
  }


  public ObjectTableTypeOrigin versionValue(Long versionValue) {
    
    this.versionValue = versionValue;
    return this;
  }

   /**
   * Define a numeric value for type origin. &lt; 100 is automatic location | bigint(20)
   * @return versionValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define a numeric value for type origin. < 100 is automatic location | bigint(20)")

  public Long getVersionValue() {
    return versionValue;
  }


  public void setVersionValue(Long versionValue) {
    this.versionValue = versionValue;
  }


  public ObjectTableTypeOrigin description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Additional information | char(255)
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Auto added", value = "Additional information | char(255)")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ObjectTableTypeOrigin priority(Long priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Type origin priority | tinyint(4)
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Type origin priority | tinyint(4)")

  public Long getPriority() {
    return priority;
  }


  public void setPriority(Long priority) {
    this.priority = priority;
  }


   /**
   * Last Review | timestamp
   * @return modified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-06-22T16:52:06.260Z", value = "Last Review | timestamp")

  public OffsetDateTime getModified() {
    return modified;
  }




   /**
   * Insert time | timestamp
   * @return inserted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-06-22T16:52:06.260Z", value = "Insert time | timestamp")

  public OffsetDateTime getInserted() {
    return inserted;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public ObjectTableTypeOrigin putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectTableTypeOrigin objectTableTypeOrigin = (ObjectTableTypeOrigin) o;
    return Objects.equals(this.id, objectTableTypeOrigin.id) &&
        Objects.equals(this.name, objectTableTypeOrigin.name) &&
        Objects.equals(this.versionName, objectTableTypeOrigin.versionName) &&
        Objects.equals(this.versionValue, objectTableTypeOrigin.versionValue) &&
        Objects.equals(this.description, objectTableTypeOrigin.description) &&
        Objects.equals(this.priority, objectTableTypeOrigin.priority) &&
        Objects.equals(this.modified, objectTableTypeOrigin.modified) &&
        Objects.equals(this.inserted, objectTableTypeOrigin.inserted)&&
        Objects.equals(this.additionalProperties, objectTableTypeOrigin.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, versionName, versionValue, description, priority, modified, inserted, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectTableTypeOrigin {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    versionName: ").append(toIndentedString(versionName)).append("\n");
    sb.append("    versionValue: ").append(toIndentedString(versionValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    inserted: ").append(toIndentedString(inserted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("version_name");
    openapiFields.add("version_value");
    openapiFields.add("description");
    openapiFields.add("priority");
    openapiFields.add("modified");
    openapiFields.add("inserted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObjectTableTypeOrigin
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ObjectTableTypeOrigin.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectTableTypeOrigin is not found in the empty JSON string", ObjectTableTypeOrigin.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version_name") != null && !jsonObj.get("version_name").isJsonNull()) && !jsonObj.get("version_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectTableTypeOrigin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectTableTypeOrigin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectTableTypeOrigin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectTableTypeOrigin.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectTableTypeOrigin>() {
           @Override
           public void write(JsonWriter out, ObjectTableTypeOrigin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectTableTypeOrigin read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ObjectTableTypeOrigin instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectTableTypeOrigin given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectTableTypeOrigin
  * @throws IOException if the JSON string is invalid with respect to ObjectTableTypeOrigin
  */
  public static ObjectTableTypeOrigin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectTableTypeOrigin.class);
  }

 /**
  * Convert an instance of ObjectTableTypeOrigin to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

