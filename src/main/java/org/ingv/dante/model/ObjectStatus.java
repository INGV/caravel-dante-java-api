/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-group`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.75.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import org.ingv.dante.model.ObjectStatusDbHost;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * ObjectStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-23T13:27:19.938453Z[Etc/UTC]")
public class ObjectStatus {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private URI instance;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private URI type = URI.create("about:blank");

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DB_CONNECTION = "db-connection";
  @SerializedName(SERIALIZED_NAME_DB_CONNECTION)
  private String dbConnection;

  public static final String SERIALIZED_NAME_DB_HOST = "db-host";
  @SerializedName(SERIALIZED_NAME_DB_HOST)
  private ObjectStatusDbHost dbHost;

  public static final String SERIALIZED_NAME_DB_PORT = "db-port";
  @SerializedName(SERIALIZED_NAME_DB_PORT)
  private Long dbPort;

  public static final String SERIALIZED_NAME_DB_NAME = "db-name";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  private String dbName;

  public static final String SERIALIZED_NAME_DB_SCHEMA = "db-schema";
  @SerializedName(SERIALIZED_NAME_DB_SCHEMA)
  private String dbSchema;

  public ObjectStatus() {
  }

  public ObjectStatus detail(String detail) {
    
    this.detail = detail;
    return this;
  }

   /**
   * A human readable explanation specific to this occurrence of the problem. You MUST NOT expose internal informations, personal data or implementation details through this field.  &#x60;detail&#x60; supports localized patterns whereas &#x60;title&#x60; pattern is only in ascii. 
   * @return detail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Request took too long to complete.", value = "A human readable explanation specific to this occurrence of the problem. You MUST NOT expose internal informations, personal data or implementation details through this field.  `detail` supports localized patterns whereas `title` pattern is only in ascii. ")

  public String getDetail() {
    return detail;
  }


  public void setDetail(String detail) {
    this.detail = detail;
  }


  public ObjectStatus instance(URI instance) {
    
    this.instance = instance;
    return this;
  }

   /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. 
   * @return instance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. ")

  public URI getInstance() {
    return instance;
  }


  public void setInstance(URI instance) {
    this.instance = instance;
  }


  public ObjectStatus status(Integer status) {
    
    this.status = status;
    return this;
  }

   /**
   * The HTTP status code generated by the origin server for this occurrence of the problem. 
   * minimum: 100
   * maximum: 600
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "503", value = "The HTTP status code generated by the origin server for this occurrence of the problem. ")

  public Integer getStatus() {
    return status;
  }


  public void setStatus(Integer status) {
    this.status = status;
  }


  public ObjectStatus title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized): the expressed pattern does not support unicode characters. 
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Service Unavailable", value = "A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized): the expressed pattern does not support unicode characters. ")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ObjectStatus type(URI type) {
    
    this.type = type;
    return this;
  }

   /**
   * An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://tools.ietf.org/html/rfc7231#section-6.6.4", value = "An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). ")

  public URI getType() {
    return type;
  }


  public void setType(URI type) {
    this.type = type;
  }


  public ObjectStatus version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Webservice version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.63.4", value = "Webservice version")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public ObjectStatus dbConnection(String dbConnection) {
    
    this.dbConnection = dbConnection;
    return this;
  }

   /**
   * DB Connection type
   * @return dbConnection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pgsql", value = "DB Connection type")

  public String getDbConnection() {
    return dbConnection;
  }


  public void setDbConnection(String dbConnection) {
    this.dbConnection = dbConnection;
  }


  public ObjectStatus dbHost(ObjectStatusDbHost dbHost) {
    
    this.dbHost = dbHost;
    return this;
  }

   /**
   * Get dbHost
   * @return dbHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjectStatusDbHost getDbHost() {
    return dbHost;
  }


  public void setDbHost(ObjectStatusDbHost dbHost) {
    this.dbHost = dbHost;
  }


  public ObjectStatus dbPort(Long dbPort) {
    
    this.dbPort = dbPort;
    return this;
  }

   /**
   * DB Connection port
   * @return dbPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25432", value = "DB Connection port")

  public Long getDbPort() {
    return dbPort;
  }


  public void setDbPort(Long dbPort) {
    this.dbPort = dbPort;
  }


  public ObjectStatus dbName(String dbName) {
    
    this.dbName = dbName;
    return this;
  }

   /**
   * DB Connection name
   * @return dbName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "caravel_20211008_hist", value = "DB Connection name")

  public String getDbName() {
    return dbName;
  }


  public void setDbName(String dbName) {
    this.dbName = dbName;
  }


  public ObjectStatus dbSchema(String dbSchema) {
    
    this.dbSchema = dbSchema;
    return this;
  }

   /**
   * DB Schema
   * @return dbSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DB Schema")

  public String getDbSchema() {
    return dbSchema;
  }


  public void setDbSchema(String dbSchema) {
    this.dbSchema = dbSchema;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public ObjectStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectStatus objectStatus = (ObjectStatus) o;
    return Objects.equals(this.detail, objectStatus.detail) &&
        Objects.equals(this.instance, objectStatus.instance) &&
        Objects.equals(this.status, objectStatus.status) &&
        Objects.equals(this.title, objectStatus.title) &&
        Objects.equals(this.type, objectStatus.type) &&
        Objects.equals(this.version, objectStatus.version) &&
        Objects.equals(this.dbConnection, objectStatus.dbConnection) &&
        Objects.equals(this.dbHost, objectStatus.dbHost) &&
        Objects.equals(this.dbPort, objectStatus.dbPort) &&
        Objects.equals(this.dbName, objectStatus.dbName) &&
        Objects.equals(this.dbSchema, objectStatus.dbSchema)&&
        Objects.equals(this.additionalProperties, objectStatus.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, instance, status, title, type, version, dbConnection, dbHost, dbPort, dbName, dbSchema, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectStatus {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    dbConnection: ").append(toIndentedString(dbConnection)).append("\n");
    sb.append("    dbHost: ").append(toIndentedString(dbHost)).append("\n");
    sb.append("    dbPort: ").append(toIndentedString(dbPort)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    dbSchema: ").append(toIndentedString(dbSchema)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("instance");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("version");
    openapiFields.add("db-connection");
    openapiFields.add("db-host");
    openapiFields.add("db-port");
    openapiFields.add("db-name");
    openapiFields.add("db-schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObjectStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ObjectStatus.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectStatus is not found in the empty JSON string", ObjectStatus.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("db-connection") != null && !jsonObj.get("db-connection").isJsonNull()) && !jsonObj.get("db-connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-connection").toString()));
      }
      // validate the optional field `db-host`
      if (jsonObj.get("db-host") != null && !jsonObj.get("db-host").isJsonNull()) {
        ObjectStatusDbHost.validateJsonObject(jsonObj.getAsJsonObject("db-host"));
      }
      if ((jsonObj.get("db-name") != null && !jsonObj.get("db-name").isJsonNull()) && !jsonObj.get("db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-name").toString()));
      }
      if ((jsonObj.get("db-schema") != null && !jsonObj.get("db-schema").isJsonNull()) && !jsonObj.get("db-schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectStatus>() {
           @Override
           public void write(JsonWriter out, ObjectStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ObjectStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectStatus
  * @throws IOException if the JSON string is invalid with respect to ObjectStatus
  */
  public static ObjectStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectStatus.class);
  }

 /**
  * Convert an instance of ObjectStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

