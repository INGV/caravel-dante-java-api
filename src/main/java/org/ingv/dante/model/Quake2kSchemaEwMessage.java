/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.47.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * Quake2kSchemaEwMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T12:56:14.544318Z[Etc/UTC]")
public class Quake2kSchemaEwMessage {
  public static final String SERIALIZED_NAME_QUAKE_ID = "quakeId";
  @SerializedName(SERIALIZED_NAME_QUAKE_ID)
  private Long quakeId;

  public static final String SERIALIZED_NAME_ORIGIN_TIME = "originTime";
  @SerializedName(SERIALIZED_NAME_ORIGIN_TIME)
  private OffsetDateTime originTime;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Double depth;

  public static final String SERIALIZED_NAME_RMS = "rms";
  @SerializedName(SERIALIZED_NAME_RMS)
  private Double rms;

  public static final String SERIALIZED_NAME_DMIN = "dmin";
  @SerializedName(SERIALIZED_NAME_DMIN)
  private Double dmin;

  public static final String SERIALIZED_NAME_RAVG = "ravg";
  @SerializedName(SERIALIZED_NAME_RAVG)
  private Double ravg;

  public static final String SERIALIZED_NAME_GAP = "gap";
  @SerializedName(SERIALIZED_NAME_GAP)
  private Float gap;

  public static final String SERIALIZED_NAME_NPH = "nph";
  @SerializedName(SERIALIZED_NAME_NPH)
  private Long nph;

  public Quake2kSchemaEwMessage() { 
  }

  public Quake2kSchemaEwMessage quakeId(Long quakeId) {
    
    this.quakeId = quakeId;
    return this;
  }

   /**
   * Localspace Id | bigint(19)
   * @return quakeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "182491", required = true, value = "Localspace Id | bigint(19)")

  public Long getQuakeId() {
    return quakeId;
  }


  public void setQuakeId(Long quakeId) {
    this.quakeId = quakeId;
  }


  public Quake2kSchemaEwMessage originTime(OffsetDateTime originTime) {
    
    this.originTime = originTime;
    return this;
  }

   /**
   * Origin time | datetime(3)
   * @return originTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2016-06-22T16:52:06.260Z", required = true, value = "Origin time | datetime(3)")

  public OffsetDateTime getOriginTime() {
    return originTime;
  }


  public void setOriginTime(OffsetDateTime originTime) {
    this.originTime = originTime;
  }


  public Quake2kSchemaEwMessage latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -90
   * maximum: 90
   * @return latitude
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "45.492599", required = true, value = "Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public Quake2kSchemaEwMessage longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
   * minimum: -180
   * maximum: 180
   * @return longitude
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9.19289", required = true, value = "Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public Quake2kSchemaEwMessage depth(Double depth) {
    
    this.depth = depth;
    return this;
  }

   /**
   * Depth in Km | double
   * @return depth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.02", required = true, value = "Depth in Km | double")

  public Double getDepth() {
    return depth;
  }


  public void setDepth(Double depth) {
    this.depth = depth;
  }


  public Quake2kSchemaEwMessage rms(Double rms) {
    
    this.rms = rms;
    return this;
  }

   /**
   * Root mean square | double
   * @return rms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Root mean square | double")

  public Double getRms() {
    return rms;
  }


  public void setRms(Double rms) {
    this.rms = rms;
  }


  public Quake2kSchemaEwMessage dmin(Double dmin) {
    
    this.dmin = dmin;
    return this;
  }

   /**
   * dmin description | ???
   * @return dmin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "dmin description | ???")

  public Double getDmin() {
    return dmin;
  }


  public void setDmin(Double dmin) {
    this.dmin = dmin;
  }


  public Quake2kSchemaEwMessage ravg(Double ravg) {
    
    this.ravg = ravg;
    return this;
  }

   /**
   * ravg description | ???
   * @return ravg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ravg description | ???")

  public Double getRavg() {
    return ravg;
  }


  public void setRavg(Double ravg) {
    this.ravg = ravg;
  }


  public Quake2kSchemaEwMessage gap(Float gap) {
    
    this.gap = gap;
    return this;
  }

   /**
   * Azimutal gap | float4
   * @return gap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Azimutal gap | float4")

  public Float getGap() {
    return gap;
  }


  public void setGap(Float gap) {
    this.gap = gap;
  }


  public Quake2kSchemaEwMessage nph(Long nph) {
    
    this.nph = nph;
    return this;
  }

   /**
   * # arrivals (P&amp;S) weight &gt;0.1 | int(11)
   * @return nph
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "# arrivals (P&S) weight >0.1 | int(11)")

  public Long getNph() {
    return nph;
  }


  public void setNph(Long nph) {
    this.nph = nph;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quake2kSchemaEwMessage quake2kSchemaEwMessage = (Quake2kSchemaEwMessage) o;
    return Objects.equals(this.quakeId, quake2kSchemaEwMessage.quakeId) &&
        Objects.equals(this.originTime, quake2kSchemaEwMessage.originTime) &&
        Objects.equals(this.latitude, quake2kSchemaEwMessage.latitude) &&
        Objects.equals(this.longitude, quake2kSchemaEwMessage.longitude) &&
        Objects.equals(this.depth, quake2kSchemaEwMessage.depth) &&
        Objects.equals(this.rms, quake2kSchemaEwMessage.rms) &&
        Objects.equals(this.dmin, quake2kSchemaEwMessage.dmin) &&
        Objects.equals(this.ravg, quake2kSchemaEwMessage.ravg) &&
        Objects.equals(this.gap, quake2kSchemaEwMessage.gap) &&
        Objects.equals(this.nph, quake2kSchemaEwMessage.nph);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quakeId, originTime, latitude, longitude, depth, rms, dmin, ravg, gap, nph);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quake2kSchemaEwMessage {\n");
    sb.append("    quakeId: ").append(toIndentedString(quakeId)).append("\n");
    sb.append("    originTime: ").append(toIndentedString(originTime)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    rms: ").append(toIndentedString(rms)).append("\n");
    sb.append("    dmin: ").append(toIndentedString(dmin)).append("\n");
    sb.append("    ravg: ").append(toIndentedString(ravg)).append("\n");
    sb.append("    gap: ").append(toIndentedString(gap)).append("\n");
    sb.append("    nph: ").append(toIndentedString(nph)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quakeId");
    openapiFields.add("originTime");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("depth");
    openapiFields.add("rms");
    openapiFields.add("dmin");
    openapiFields.add("ravg");
    openapiFields.add("gap");
    openapiFields.add("nph");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quakeId");
    openapiRequiredFields.add("originTime");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("depth");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Quake2kSchemaEwMessage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Quake2kSchemaEwMessage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quake2kSchemaEwMessage is not found in the empty JSON string", Quake2kSchemaEwMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Quake2kSchemaEwMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quake2kSchemaEwMessage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Quake2kSchemaEwMessage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quake2kSchemaEwMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quake2kSchemaEwMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quake2kSchemaEwMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quake2kSchemaEwMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<Quake2kSchemaEwMessage>() {
           @Override
           public void write(JsonWriter out, Quake2kSchemaEwMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quake2kSchemaEwMessage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Quake2kSchemaEwMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Quake2kSchemaEwMessage
  * @throws IOException if the JSON string is invalid with respect to Quake2kSchemaEwMessage
  */
  public static Quake2kSchemaEwMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quake2kSchemaEwMessage.class);
  }

 /**
  * Convert an instance of Quake2kSchemaEwMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

