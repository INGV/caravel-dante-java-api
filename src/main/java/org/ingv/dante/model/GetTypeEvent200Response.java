/*
 * Dante Web Services
 *       # Introduction   Dante is an API Web Service used for iteract with earthquake data stored in database (**quakedb**); the **quakedb** database schema is used at INGV.   Use other schema would require cration of specific `Model` and `Controller` but this is the potential of web services.      Dante provides a set of routes to store message **event**, **origin**, **magnitude**, **arrival**, **...**.      # Input   As input, Dante acept:   - A `json` message (view '**store**' spec below)    - An Eartworm `json` message (view '**earthworm api**' spec below) produced by **ew2openapi** module      # Output   As output, Dante has a RESTful api foreach database table and implement three specific routes:    - `events-pref`: returns the preferred origin and the preferred magnitude from all clusterd events.    - `events`: returns the preferred origin and the preferred magnitude from the same instance.    - `event`: returns the full event (event, origins, magnitudes, arrivals, amplitude, etc...) from an **eventid** or **originid**_/_**originid**.        
 *
 * The version of the OpenAPI document: 2.47.0-dev
 * Contact: valentino.lauciani@ingv.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ingv.dante.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.ingv.dante.model.GetTypeEvent200ResponseAllOf;
import org.ingv.dante.model.MetaDefinition;
import org.ingv.dante.model.MetaDefinitionLinksInner;
import org.ingv.dante.model.ObjectTableTypeEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ingv.dante.JSON;

/**
 * GetTypeEvent200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-28T10:51:20.693977Z[Etc/UTC]")
public class GetTypeEvent200Response {
  public static final String SERIALIZED_NAME_CURRENT_PAGE = "current_page";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private String currentPage;

  public static final String SERIALIZED_NAME_FIRST_PAGE_URL = "first_page_url";
  @SerializedName(SERIALIZED_NAME_FIRST_PAGE_URL)
  private String firstPageUrl;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_LAST_PAGE = "last_page";
  @SerializedName(SERIALIZED_NAME_LAST_PAGE)
  private String lastPage;

  public static final String SERIALIZED_NAME_LAST_PAGE_URL = "last_page_url";
  @SerializedName(SERIALIZED_NAME_LAST_PAGE_URL)
  private String lastPageUrl;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<MetaDefinitionLinksInner> links = null;

  public static final String SERIALIZED_NAME_NEXT_PAGE_URL = "next_page_url";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_URL)
  private String nextPageUrl;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private String perPage;

  public static final String SERIALIZED_NAME_PREV_PAGE_URL = "prev_page_url";
  @SerializedName(SERIALIZED_NAME_PREV_PAGE_URL)
  private String prevPageUrl;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private String total;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<ObjectTableTypeEvent> data = null;

  public GetTypeEvent200Response() { 
  }

  public GetTypeEvent200Response currentPage(String currentPage) {
    
    this.currentPage = currentPage;
    return this;
  }

   /**
   * Current page.
   * @return currentPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Current page.")

  public String getCurrentPage() {
    return currentPage;
  }


  public void setCurrentPage(String currentPage) {
    this.currentPage = currentPage;
  }


  public GetTypeEvent200Response firstPageUrl(String firstPageUrl) {
    
    this.firstPageUrl = firstPageUrl;
    return this;
  }

   /**
   * URL base path.
   * @return firstPageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://localhost:8087/page=1", value = "URL base path.")

  public String getFirstPageUrl() {
    return firstPageUrl;
  }


  public void setFirstPageUrl(String firstPageUrl) {
    this.firstPageUrl = firstPageUrl;
  }


  public GetTypeEvent200Response from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * Showed record from.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Showed record from.")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public GetTypeEvent200Response lastPage(String lastPage) {
    
    this.lastPage = lastPage;
    return this;
  }

   /**
   * Last page.
   * @return lastPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Last page.")

  public String getLastPage() {
    return lastPage;
  }


  public void setLastPage(String lastPage) {
    this.lastPage = lastPage;
  }


  public GetTypeEvent200Response lastPageUrl(String lastPageUrl) {
    
    this.lastPageUrl = lastPageUrl;
    return this;
  }

   /**
   * URL base path.
   * @return lastPageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://localhost:8087/page=3", value = "URL base path.")

  public String getLastPageUrl() {
    return lastPageUrl;
  }


  public void setLastPageUrl(String lastPageUrl) {
    this.lastPageUrl = lastPageUrl;
  }


  public GetTypeEvent200Response links(List<MetaDefinitionLinksInner> links) {
    
    this.links = links;
    return this;
  }

  public GetTypeEvent200Response addLinksItem(MetaDefinitionLinksInner linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MetaDefinitionLinksInner> getLinks() {
    return links;
  }


  public void setLinks(List<MetaDefinitionLinksInner> links) {
    this.links = links;
  }


  public GetTypeEvent200Response nextPageUrl(String nextPageUrl) {
    
    this.nextPageUrl = nextPageUrl;
    return this;
  }

   /**
   * URL base path.
   * @return nextPageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://localhost:8087/page=3", value = "URL base path.")

  public String getNextPageUrl() {
    return nextPageUrl;
  }


  public void setNextPageUrl(String nextPageUrl) {
    this.nextPageUrl = nextPageUrl;
  }


  public GetTypeEvent200Response path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * URL base path.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://localhost:8087", value = "URL base path.")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public GetTypeEvent200Response perPage(String perPage) {
    
    this.perPage = perPage;
    return this;
  }

   /**
   * Record per page.
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4000", value = "Record per page.")

  public String getPerPage() {
    return perPage;
  }


  public void setPerPage(String perPage) {
    this.perPage = perPage;
  }


  public GetTypeEvent200Response prevPageUrl(String prevPageUrl) {
    
    this.prevPageUrl = prevPageUrl;
    return this;
  }

   /**
   * URL base path.
   * @return prevPageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://localhost:8087/page=1", value = "URL base path.")

  public String getPrevPageUrl() {
    return prevPageUrl;
  }


  public void setPrevPageUrl(String prevPageUrl) {
    this.prevPageUrl = prevPageUrl;
  }


  public GetTypeEvent200Response to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Showed record to.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4000", value = "Showed record to.")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public GetTypeEvent200Response total(String total) {
    
    this.total = total;
    return this;
  }

   /**
   * Total records.
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10000", value = "Total records.")

  public String getTotal() {
    return total;
  }


  public void setTotal(String total) {
    this.total = total;
  }


  public GetTypeEvent200Response data(List<ObjectTableTypeEvent> data) {
    
    this.data = data;
    return this;
  }

  public GetTypeEvent200Response addDataItem(ObjectTableTypeEvent dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ObjectTableTypeEvent> getData() {
    return data;
  }


  public void setData(List<ObjectTableTypeEvent> data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTypeEvent200Response getTypeEvent200Response = (GetTypeEvent200Response) o;
    return Objects.equals(this.currentPage, getTypeEvent200Response.currentPage) &&
        Objects.equals(this.firstPageUrl, getTypeEvent200Response.firstPageUrl) &&
        Objects.equals(this.from, getTypeEvent200Response.from) &&
        Objects.equals(this.lastPage, getTypeEvent200Response.lastPage) &&
        Objects.equals(this.lastPageUrl, getTypeEvent200Response.lastPageUrl) &&
        Objects.equals(this.links, getTypeEvent200Response.links) &&
        Objects.equals(this.nextPageUrl, getTypeEvent200Response.nextPageUrl) &&
        Objects.equals(this.path, getTypeEvent200Response.path) &&
        Objects.equals(this.perPage, getTypeEvent200Response.perPage) &&
        Objects.equals(this.prevPageUrl, getTypeEvent200Response.prevPageUrl) &&
        Objects.equals(this.to, getTypeEvent200Response.to) &&
        Objects.equals(this.total, getTypeEvent200Response.total) &&
        Objects.equals(this.data, getTypeEvent200Response.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPage, firstPageUrl, from, lastPage, lastPageUrl, links, nextPageUrl, path, perPage, prevPageUrl, to, total, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTypeEvent200Response {\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    firstPageUrl: ").append(toIndentedString(firstPageUrl)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lastPage: ").append(toIndentedString(lastPage)).append("\n");
    sb.append("    lastPageUrl: ").append(toIndentedString(lastPageUrl)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    nextPageUrl: ").append(toIndentedString(nextPageUrl)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    prevPageUrl: ").append(toIndentedString(prevPageUrl)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_page");
    openapiFields.add("first_page_url");
    openapiFields.add("from");
    openapiFields.add("last_page");
    openapiFields.add("last_page_url");
    openapiFields.add("links");
    openapiFields.add("next_page_url");
    openapiFields.add("path");
    openapiFields.add("per_page");
    openapiFields.add("prev_page_url");
    openapiFields.add("to");
    openapiFields.add("total");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTypeEvent200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GetTypeEvent200Response.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTypeEvent200Response is not found in the empty JSON string", GetTypeEvent200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetTypeEvent200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTypeEvent200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("current_page") != null && !jsonObj.get("current_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_page").toString()));
      }
      if (jsonObj.get("first_page_url") != null && !jsonObj.get("first_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_page_url").toString()));
      }
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (jsonObj.get("last_page") != null && !jsonObj.get("last_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_page").toString()));
      }
      if (jsonObj.get("last_page_url") != null && !jsonObj.get("last_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_page_url").toString()));
      }
      JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
      if (jsonArraylinks != null) {
        // ensure the json data is an array
        if (!jsonObj.get("links").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
        }

        // validate the optional field `links` (array)
        for (int i = 0; i < jsonArraylinks.size(); i++) {
          MetaDefinitionLinksInner.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("next_page_url") != null && !jsonObj.get("next_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_page_url").toString()));
      }
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("per_page") != null && !jsonObj.get("per_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `per_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("per_page").toString()));
      }
      if (jsonObj.get("prev_page_url") != null && !jsonObj.get("prev_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev_page_url").toString()));
      }
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
      if (jsonArraydata != null) {
        // ensure the json data is an array
        if (!jsonObj.get("data").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
        }

        // validate the optional field `data` (array)
        for (int i = 0; i < jsonArraydata.size(); i++) {
          ObjectTableTypeEvent.validateJsonObject(jsonArraydata.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTypeEvent200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTypeEvent200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTypeEvent200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTypeEvent200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTypeEvent200Response>() {
           @Override
           public void write(JsonWriter out, GetTypeEvent200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTypeEvent200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetTypeEvent200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTypeEvent200Response
  * @throws IOException if the JSON string is invalid with respect to GetTypeEvent200Response
  */
  public static GetTypeEvent200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTypeEvent200Response.class);
  }

 /**
  * Convert an instance of GetTypeEvent200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

